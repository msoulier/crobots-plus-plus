#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct type_UniformViewProj
{
    float4x4 ViewProj;
};

struct type_UniformModel
{
    float4x4 Model;
};

constant spvUnsafeArray<float3, 6> _56 = spvUnsafeArray<float3, 6>({ float3(-1.0, 0.0, 0.0), float3(1.0, 0.0, 0.0), float3(0.0, -1.0, 0.0), float3(0.0, 1.0, 0.0), float3(0.0, 0.0, -1.0), float3(0.0, 0.0, 1.0) });

struct main0_out
{
    float2 out_var_TEXCOORD0 [[user(locn0)]];
    float3 out_var_TEXCOORD1 [[user(locn1)]];
    float4 gl_Position [[position]];
};

struct main0_in
{
    uint2 in_var_TEXCOORD0 [[attribute(0)]];
};

vertex main0_out main0(main0_in in [[stage_in]], constant type_UniformViewProj& UniformViewProj [[buffer(0)]], constant type_UniformModel& UniformModel [[buffer(1)]])
{
    main0_out out = {};
    out.gl_Position = UniformViewProj.ViewProj * (UniformModel.Model * float4((float3(1.0) - (float3(float((in.in_var_TEXCOORD0.x >> 8u) & 1u), float((in.in_var_TEXCOORD0.x >> 17u) & 1u), float((in.in_var_TEXCOORD0.x >> 26u) & 1u)) * 2.0)) * float3(float((in.in_var_TEXCOORD0.x >> 0u) & 255u), float((in.in_var_TEXCOORD0.x >> 9u) & 255u), float((in.in_var_TEXCOORD0.x >> 18u) & 255u)), 1.0));
    out.out_var_TEXCOORD0 = float2(float((in.in_var_TEXCOORD0.y >> 3u) & 255u) * 0.0039215688593685626983642578125, 0.5);
    out.out_var_TEXCOORD1 = _56[(in.in_var_TEXCOORD0.y >> 0u) & 7u];
    return out;
}

